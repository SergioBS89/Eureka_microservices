# ---------------------------------------------------------------------------- #
#               MAIN ENDPOINTS AND HOW TO RUN THIS APP                         #
# ---------------------------------------------------------------------------- #

Run in this order:
1º Eureka server
2º Config server
3º Gateway
4º Product microservice
5º Item microservice

ROUTES EUREKA SERVER (not using server config project):
findAll():
localhost:8082/
findById():
localhost:8082/{id}/quan/{quantity}

ROUTES WORKING WITH CONFIG SERVER
Show some info of properties GitHub:
localhost:8005/get-conf
Show full info of environment properties GitHub:
localhost:8888/microservice-item/dev
localhost:8888/microservice-item/prod

ROUTES GATEWAY:
findAll():
localhost:8083/api/products/
localhost:8083/api/items/
findById():
localhost:8083/api/products/{id}
localhost:8083/api/items/{id}/quan/{quantity}
findById using circuit breaker annotation:
localhost:8083/api/items/{id}/q/{quantity}
create():
localhost:8083/api/products/
localhost:8083/api/items/
update:
localhost:8083/api/products/{id}
localhost:8083/api/items/{id}
delete()
localhost:8083/api/products/{id}
localhost:8083/api/items/{id}


# ---------------------------------------------------------------------------- #
#               CONEXION ENTRE MICROSERCIOS CON LA LIBRERIA FEIGN              #
# ---------------------------------------------------------------------------- #
Feign es una librería que forma parte del stack de Spring Cloud, desarrollada por Netflix,
para generar clientes de servicios REST de forma declarativa.

Al estilo de los repositorios de Spring Data,lo único que debemos hacer es anotar una interfaz
con las operaciones de mapeo de los servicios que queremos consumir, parametrizando 
apropiadamente la entrada y salida de los mismos, para que se correspondan con los verbos y 
los datos de las operaciones de los servicios que queremos consumir.

Desde el punto de vista del soporte que tenemos a día de hoy con Spring, Feign nos facilitaría 
el trabajo así como lo hace Spring Data, sin necesidad de «bajar» al nivel de RestTemplate,
como Spring Data nos evita trabajar directamente con EntityManager o JdbcTemplate. Y, siguiendo
con la comparación,igualmente la implementación se genera al vuelo en tiempo de arranque del 
contexto de Spring.

# ---------------------------------------------------------------------------- #
#                                 EUREKA SERVER                                #
# ---------------------------------------------------------------------------- #
Desde un tiempo a esta parte se ha empezado a escuchar conceptos como la arquitectura de
microservicios, una especie de versión 2.0 de una arquitectura distribuida.
Este tipo de arquitecturas se han visto espoleadas por el gran auge de las tecnologías Cloud, 
las cuales le vienen “como anillo al dedo”. Es aqui donde aparece Eureka.

Eureka es un servidor para el registro y localización de microservicios, balanceo de carga
y tolerancia a fallos. La función de Eureka es registrar las diferentes instancias de
microservicios existentes, su localización, estado, metadatos...

¿Cómo funciona?

Cada microservicio, durante su arranque, se comunicará con el servidor Eureka para notificar
que está disponible, dónde está situado, sus metadatos… De esta forma Eureka mantendrá en su
registro la información de todos los microservicios del ecosistema.
El nuevo microservicio continuará notificando a Eureka su estado cada 30 segundos, lo que
denominan ‘heartbeats’. Si después de tres periodos Eureka no recibe notificación de dicho
microservicio, lo eliminará del registro. De la misma forma una vez vueltos a recibir tres
notificaciones considerará el servicio disponible de nuevo.
Cada cliente de Eureka podrá también recuperar el registro para localizar otros microservicios
con los que necesite comunicarse. Dicha información de registro se cachea en el cliente.
Eureka se puede configurar para funcionar en modo cluster donde varias instancias “peer”
intercambiarán su información. Esto, junto al cacheo de la información de registro en los
clientes da a Eureka una alta tolerancia a fallos.

# ---------------------------------------------------------------------------- #
#                                QUE ES GATEWAY                                #
# ---------------------------------------------------------------------------- #

Spring Cloud Gateway se encarga de proporcionar un punto de entrada a nuestro ecosistema de
microservicios(conectados entre si), proporcionando capacidades de enrutamiento dinámico,
seguridad y monitorización de las peticiones que se realicen.

# ---------------------------------------------------------------------------- #
#                   PATRON CIRCUIT BREAKER CON RESELICIENCE4J                  #
# ---------------------------------------------------------------------------- #

¿Qué es el Patrón Circuit Breaker?

En nuestra arquitectura de microservicios, vamos a realizar llamadas a otros servicios en 
muchas ocasiones de manera síncrona. Es por esa razón que en estas llamadas puede darse la 
circunstancia de que al servicio que se le este llamando no sea accesible o que la latencia de 
la llamada sea demasiado alta. En estos casos estamos utilizando unos recursos o unos threads 
los cuales son muy valiosos y estamos ocasionando, por un lado dejar bloqueada una llamada y 
por otro lado podemos provocar un fallo en cascada.

Una implementación de Circuit Breaker nos va a ayudar en este tipo de escenarios, en los que 
la llamada a un tercero se ha bloqueado, evitando repetidas llamadas a ese servicio y evitar 
ese gasto de recursos.

¿What is Resilience4J?

Resilience4j is a library that will allow us to make our applications resilient. 
It is oriented to functional programming, it is easy to use and light since it has almost no 
dependencies.

How it works?

Sometimes an user send a request and this one is denegated. If that user keeps launching
infinite request, it coulb be a problem...here is when Resilience4J starts to work! We can customize our
own bean CicuitBreaker to mannage differents parametters, like the number of request allowed,
time available to repeat the process, percentage of fails.

When the program throw circuit breaker is executed some action (exception error, messages...) and
start the OPEN STATE.
Once the recovery time is over (we can modify a value to managge the wait
time to recover the program), after time is over program starts in HALF OPEN STATE
(it has a differents parametters), executing request again to try if program is working, if not, 
the circuit breaker is thowing again.

List of parametters to customize our circuit beans:

-SlidingWindowsSize(number) -> It mannaged the number of attemps before circuit breaker throws
-failureRateThreshold(percentage) -> It mannaged the percentage of fails allowed of the number
of request sending [if SlidingWindowsSize(10) and failureRateThreshold(50) user only has 5 attemps]
-waitDurationInOpenState(Duration) -> Time to recover the program and leave circuit breaker
-permittedNumberOfCallsInHalfOpenState(number) ->Number o attemps allowed in half open state

----------------PARAMETERS TO CONFIG Resilience4J-----------------------

# NUM OF REQUEST IN OPEN STATE
sliding-window-size= num 

# NUM OF FAILS % (By default is 100%)
failure-rate-threshold= %

# TIME DURATION OF OPEN STATE BEFORE THROW CIRCUIT BREAKER
wait-duration-in-open-state= secons

# NUM OF ATTEMPS TO DO REQUEST IN HALF OPEN STATE
permitted-number-of-calls-in-half-open-state=4

# NUM OF FAILS WHEN WE ARE USING SLOW CALLS
slow-call-rate-threshold= %

# REQUEST that duration is more than 2 seconds are counted as slowcalls 
slow-call-duration-threshold=2s

# NAME OF THE INSTANCE THAT USES THIS CONFIG (Items controller anotation circuit breaker)
items.base-config=defecto

# CONFIG TIME TO SLOW CALLS (If the low call is throw, this parameter config its time)
timeout-duration=5s

# NAME OF THE INSTANCE THAT USES THIS CONFIG (Items controller anotation circuit breaker)
base-config=defecto